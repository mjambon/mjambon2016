<?php
/*
  Extension of MediaWiki for web-based bibliography retrieval and formatting.
  Copyright (C) 2005 Martin Jambon

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
  USA.
*/

/*
  To activate the extension, include it from your LocalSettings.php
  with: require_once("extensions/Biblio.php");
  It require the PHP files from a recent version of Nusoap, which should be put
  in the extensions/nusoap/ directory.

  This module provides tags "cite" and "biblio". 
  "cite" tags indicate a citation in the text, one or several keys are given.
  These keys must be defined in the "biblio" section.
  There is at most one "biblio" section on the page and it must come after 
  the last citation.
  Example:

  some wikitext
  As reported previously <cite>somekey wikipedia</cite>, blabla
  some wikitext
  <biblio>
  #wikipedia [http://www.wikipedia.org Wikipedia]
  #somekey pmid=12345678
  </biblio>
*/

require_once('nusoap/nusoap.php');


// Registration of this extension

$wgExtensionFunctions[] = "wfBiblioExtension";

function wfBiblioExtension() {
  global $wgParser;
  // register the extension with the WikiText parser
  // the first parameter is the name of the new tag.
  // In this case it defines the tag <example> ... </example>
  // the second parameter is the callback function for
  // processing the text between the tags
  $wgParser->setHook("cite", "renderCite");
  $wgParser->setHook("biblio", "renderBiblio");
}


// Management of the citation indices (order in which they appear in the text)

$Citations = array();

// find the number of the reference if already cited or assign a new one
function CitationIndex($key) {
  global $Citations;
  if (array_key_exists($key, $Citations)) {
    return $Citations[$key];
  } else {
    $index = count($Citations);
    $Citations[$key] = $index;
    return $index;
  }
}

// Retrieve PubMed entry from their SOAP webservice
function eSummary($pmids) {
  $server_url = 
    'http://eutils.ncbi.nlm.nih.gov/entrez/eutils/soap/eutils.wsdl';
  $operation = 'run_eSummary';
  $param = array('db' => 'pubmed',
		 'id' => implode(",", $pmids));

  $proxyhost = isset($_POST['proxyhost']) ? $_POST['proxyhost'] : '';
  $proxyport = isset($_POST['proxyport']) ? $_POST['proxyport'] : '';
  $proxyusername = 
    isset($_POST['proxyusername']) ? $_POST['proxyusername'] : '';
  $proxypassword =
    isset($_POST['proxypassword']) ? $_POST['proxypassword'] : '';
  $client = 
    new soapclient($server_url, true,
		   $proxyhost, $proxyport, 
		   $proxyusername, $proxypassword);
  $err = $client->getError();

  $soap_result = array();
  if (!$err) {
    // Doc/lit parameters get wrapped
    $result = $client->call($operation, array('parameters' => $param), 
			    '', '', false, true);
    if (!$client->fault) {
      $err = $client->getError();
      if ($err) {
	return $soap_result;
      } else {
	// Display the result
	$soap_result = $result;
      }
    }
  }

  return $soap_result;
}

function UnWiki($s) {
  return preg_replace(array("/\n+/", "/ /"), array("<br>", "&nbsp;"), $s);
}

function Untag($tag, $text) {
  return preg_replace(array("/<\/?$tag>/"), array(""), $text);
}



// Formatting of a PubMed record

function findPubMedField($field, $item) {
  foreach ($item as $x) {
    if ($x['!Name'] == $field) {
      if (array_key_exists('!',$x)) {
	return $x['!'];
      } else if (array_key_exists('Item',$x)) {
	return $x['Item'];
      }
    }
  };
  return "";
}

function findPubMedFields($field, $item) {
  $result = array();
  foreach ($item as $x) {
    if ($x['!Name'] == $field) {
      if (array_key_exists('!',$x)) {
	$result[] = $x['!'];
      } else if (array_key_exists('Item',$x)) {
	$result[] = $x['Item'];
      }
    }
  };
  return $result;
}

function FormatBib($authors, $title, $origin) {
  $title = $title = '' ? '' : "<i>$title</i>";
  return "$authors $title $origin";
}

function ConcatAuthors($authors) {
  $n = count($authors);
  $result = "";
  if ($n > 0) {
    $result = $authors[0];
    for ($i = 1; $i < count($authors) - 2; $i++) {
      $result .= ", $authors[$i]";
    }
    if ($n > 1) {
      $auth = $authors[$n-1];
      $result .= " and $auth.";
    }
  }
  return $result;
}

function FormatPubMed($pmdata) {
  $result = array();
  $docsum = $pmdata['DocSum'];
  $data = is_null($docsum['Item']) ? $docsum : array($docsum);
  foreach ($data as $entry) {
    $pmid = $entry['Id'];
    $item = $entry['Item'];
    $authors = findPubMedFields('Author', 
				findPubMedField('AuthorList', $item));
    $title = findPubMedField('Title', $item);
    $source = findPubMedField('Source', $item);
    $pubdate = findPubMedField('PubDate', $item);
    $issue = findPubMedField('Issue', $item);
    $volume = findPubMedField('Volume', $item);
    $pages = findPubMedField('Pages', $item);

    $authors = ConcatAuthors($authors);
    $origin = "$source $pubdate";
    $origin .= $volume == '' ? '' : 
      "; $volume" . ($issue = '' ? '' : "($issue)");
    $origin .= $pages == '' ? '' : " $pages";

    $result["$pmid"] = FormatBib($authors, $title, $origin);
  }
  return $result;
}

function PubMedUrl($pmids) {
  $list_uids = implode(",", $pmids);
  return "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=pubmed&dopt=Abstract&list_uids=$list_uids";
}

function HtmlLink($url, $text) {
  return "<a href=\"$url\">$text</a>";
}

function HtmlExtLink($url, $text, $title) {
  return "<a href=\"$url\" class=\"external\" title=\"$title\"" .
         "rel=\"nofollow\">$text</a>";
}


// The callback functions for converting the input text to HTML output

// Conversion of the contents of <cite> tags
function renderCite($input) {
  $keys = preg_split('/[^-+A-Za-z_0-9]+/', $input, -1, PREG_SPLIT_NO_EMPTY);
  $list = array();
  foreach ($keys as $key) {
    $index = CitationIndex($key);
    $list[] = array($index,$key);
  }
  sort($list);
  $links = array();
  foreach ($list as $ent) {
    $link = HtmlLink("#bibkey_$ent[1]", $ent[0]+1);
    $links[] = $link;
  }
  return "[". implode(", ", $links) ."]";
}

function cleanLi($text) {
  return trim(str_replace(array("\n", "\r"), " ", $text));
}

function parseBiblio($list) {
  $result = array();
  $pmids = array();
  foreach ($list as $ref) {
    $matches = array();
    preg_match ('/([-+A-Za-z_0-9]+)(.*)/s', $ref, $matches);
    $key = $matches[1];
    $srctext = cleanLi($matches[2]);
    $m = array();
    preg_match ('/^[[:space:]]*pmid=([0-9]+)/', $srctext, $m);
    $pmid = $m[1];
    if ($pmid != '') {
      $result[] = array('key' => $key, 'pmid' => $pmid);
      $pmids[] = $pmid;
    } else { // free wikitext
      $result[] = array('key' => $key, 'wikitext' => $srctext);
    }
  }
  return array($result, $pmids);
}


// Conversion of the contents of <biblio> tags
function renderBiblio($input) {
  global $wgParser, $wgTitle, $wgOut;
  $refs = array();
  $list = preg_split("/[[:space:]]*^[ \t]*#[[:space:]]*/m",
		     $input, -1, PREG_SPLIT_NO_EMPTY);
  $parseResult = parseBiblio($list);
  $entries = $parseResult[0];
  $pmids = $parseResult[1];
  $pmdata = eSummary($pmids);
  $pmentries = FormatPubMed($pmdata);
  $refs = array();
  foreach ($entries as $ref) {
    $key = $ref['key'];
    $pmid = $ref['pmid'];
    $wikitext = $ref['wikitext'];
    $text = '';
    if (!is_null($pmid)) { // PubMed result
      $pmlink = HtmlExtLink(PubMedUrl(array($pmid)), "PubMed", "PMID $pmid");
      $text = $pmentries["$pmid"] . " $pmlink";
    } else if (!is_null($wikitext)) { // plain wikitext
      $parserOptions = $wgOut->mParserOptions;
      $parserResult = $wgParser->parse($wikitext, $wgTitle, $parserOptions);
      $text = trim(Untag('p', $parserResult->getText()));
    }
    $index = CitationIndex($key);
    $refs[] = array($index, $key, $text);
  }
  sort($refs); reset($refs);
  $result = array();
  foreach ($refs as $ref) {
    $index = $ref[0] + 1;
    $vkey = "<span style=\"color:#aaa\">[$ref[1]]</span>";
    $result[] = 
      "<li id=\"bibkey_$ref[1]\" value=\"$index\"> $ref[2] $vkey\n</li>\n";
  }
  return '<ol>' . implode ("", $result) . '</ol>';
}
?>
